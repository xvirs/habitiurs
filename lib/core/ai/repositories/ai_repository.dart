// lib/core/ai/repositories/ai_repository.dart - CORREGIDO CON TODOS LOS M√âTODOS
import 'package:habitiurs/core/ai/models/ai_response_model.dart';

import '../models/ai_request_model.dart';
import '../services/gemini_service.dart';
import '../services/ai_fallback_service.dart';

/// Repository central para todas las funcionalidades de IA
class AIRepository {
  final GeminiService _geminiService;
  final AIFallbackService _fallbackService;
  
  static final AIRepository _instance = AIRepository._internal();
  factory AIRepository() => _instance;
  
  AIRepository._internal() 
      : _geminiService = GeminiService(),
        _fallbackService = AIFallbackService();

  /// M√©todo principal que maneja online/offline autom√°ticamente
  Future<AIResponse> generateResponse(AIRequest request) async {
    try {
      // Intentar conectividad
      final hasConnection = await _geminiService.checkConnectivity();
      
      if (hasConnection) {
        try {
          return await _geminiService.generateContent(request);
        } catch (e) {
          print('‚ö†Ô∏è [AI] Gemini fall√≥, usando fallback: $e');
          return await _fallbackService.generateFallbackResponse(request);
        }
      } else {
        print('üìµ [AI] Sin conexi√≥n, usando fallback');
        return await _fallbackService.generateFallbackResponse(request);
      }
    } catch (e) {
      print('‚ùå [AI] Error general: $e');
      return await _fallbackService.generateFallbackResponse(request);
    }
  }

  // M√âTODOS ESPEC√çFICOS POR FEATURE

  /// HABITS
  Future<AIResponse> evaluateHabit(String habitDescription) async {
    return await _geminiService.evaluateHabit(habitDescription);
  }

  Future<AIResponse> analyzeHabitPatterns(Map<String, dynamic> habitData) async {
    final request = AIRequest(
      type: AIRequestType.habitAnalysis,
      prompt: _buildHabitAnalysisPrompt(habitData),
      metadata: habitData,
    );
    return await generateResponse(request);
  }

  Future<AIResponse> suggestHabitImprovements(Map<String, dynamic> habitData) async {
    final request = AIRequest(
      type: AIRequestType.habitSuggestion,
      prompt: _buildHabitSuggestionPrompt(habitData),
      metadata: habitData,
    );
    return await generateResponse(request);
  }

  /// STATISTICS - ‚úÖ M√âTODOS AGREGADOS
  Future<AIResponse> analyzeStatisticsTrends(Map<String, dynamic> statsData) async {
    final request = AIRequest(
      type: AIRequestType.statisticsAnalysis,
      prompt: _buildStatsAnalysisPrompt(statsData),
      metadata: statsData,
    );
    return await generateResponse(request);
  }

  Future<AIResponse> predictHabitSuccess(Map<String, dynamic> predictionData) async {
    final request = AIRequest(
      type: AIRequestType.successPrediction,
      prompt: _buildPredictionPrompt(predictionData),
      metadata: predictionData,
    );
    return await generateResponse(request);
  }

  Future<AIResponse> analyzeTrendPatterns(Map<String, dynamic> trendData) async {
    final request = AIRequest(
      type: AIRequestType.trendAnalysis,
      prompt: _buildTrendAnalysisPrompt(trendData),
      metadata: trendData,
    );
    return await generateResponse(request);
  }

  /// AI ASSISTANT (mantener compatibilidad)
  Future<AIResponse> getPersonalizedRecommendation(Map<String, dynamic> userContext) async {
    final request = AIRequest(
      type: AIRequestType.personalRecommendation,
      prompt: _buildPersonalRecommendationPrompt(userContext),
      metadata: userContext,
    );
    return await generateResponse(request);
  }

  Future<AIResponse> getMotivationalMessage(Map<String, dynamic> context) async {
    final request = AIRequest(
      type: AIRequestType.motivationalMessage,
      prompt: _buildMotivationalPrompt(context),
      metadata: context,
    );
    return await generateResponse(request);
  }

  // ‚úÖ PROMPT BUILDERS AGREGADOS (los que faltaban del GeminiService)
  String _buildHabitAnalysisPrompt(Map<String, dynamic> habitData) {
    return '''
Analiza estos patrones de h√°bitos de usuario:

DATOS DEL USUARIO:
${_formatMapForPrompt(habitData)}

Identifica:
1. Patrones de √©xito (d√≠as/horarios mejores)
2. Obst√°culos recurrentes
3. Recomendaciones espec√≠ficas de mejora

Responde en m√°ximo 4 l√≠neas con insights accionables.
''';
  }

  String _buildHabitSuggestionPrompt(Map<String, dynamic> habitData) {
    return '''
Bas√°ndote en estos datos de h√°bitos:

DATOS:
${_formatMapForPrompt(habitData)}

Sugiere mejoras espec√≠ficas:
1. Ajustes de rutina
2. Estrategias de motivaci√≥n
3. Modificaciones de entorno

M√°ximo 3 l√≠neas, enfoque pr√°ctico.
''';
  }

  String _buildStatsAnalysisPrompt(Map<String, dynamic> statsData) {
    return '''
Analiza estas estad√≠sticas de progreso de h√°bitos:

ESTAD√çSTICAS:
${_formatMapForPrompt(statsData)}

Proporciona:
1. Interpretaci√≥n del progreso actual
2. Tendencias positivas identificadas
3. √Åreas de oportunidad espec√≠ficas
4. Meta realista para el pr√≥ximo mes

M√°ximo 4 l√≠neas, enfoque en insights accionables.
''';
  }

  String _buildPredictionPrompt(Map<String, dynamic> predictionData) {
    return '''
Bas√°ndote en estos datos hist√≥ricos de h√°bitos:

DATOS HIST√ìRICOS:
${_formatMapForPrompt(predictionData)}

Predice:
1. Probabilidad de mantener progreso actual
2. H√°bitos con mayor riesgo de abandono
3. Estrategias preventivas espec√≠ficas

Respuesta concisa en 3 l√≠neas m√°ximo.
''';
  }

  String _buildTrendAnalysisPrompt(Map<String, dynamic> trendData) {
    return '''
Analiza estas tendencias de h√°bitos:

DATOS DE TENDENCIAS:
${_formatMapForPrompt(trendData)}

Identifica:
1. Patrones estacionales o c√≠clicos
2. Factores que influyen en el rendimiento
3. Oportunidades de optimizaci√≥n

M√°ximo 3 l√≠neas con insights espec√≠ficos.
''';
  }

  String _buildPersonalRecommendationPrompt(Map<String, dynamic> userContext) {
    return '''
Eres un experto coach de h√°bitos que ayuda a usuarios de Habitiurs.

DATOS DEL USUARIO:
${_formatMapForPrompt(userContext)}

Genera un consejo personalizado y motivador:
- M√°ximo 2 p√°rrafos cortos
- Enf√≥cate en mejoras peque√±as e incrementales
- Mant√©n un tono positivo pero realista
- Incluye una acci√≥n espec√≠fica que puedan tomar hoy

Evita consejos gen√©ricos, personaliza seg√∫n sus datos.
''';
  }

  String _buildMotivationalPrompt(Map<String, dynamic> context) {
    return '''
Genera un mensaje motivacional personalizado basado en:

CONTEXTO:
${_formatMapForPrompt(context)}

Crea un mensaje que:
1. Reconozca su progreso actual
2. Los inspire a continuar
3. Incluya una perspectiva positiva sobre los desaf√≠os

M√°ximo 2 l√≠neas, tono alentador y espec√≠fico.
''';
  }

  String _formatMapForPrompt(Map<String, dynamic> data) {
    return data.entries
        .map((e) => '${e.key}: ${e.value}')
        .join('\n');
  }

  /// UTILIDADES
  Future<bool> hasInternetConnection() async {
    return await _geminiService.checkConnectivity();
  }

  void dispose() {
    _geminiService.dispose();
  }
}